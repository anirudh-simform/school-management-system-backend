// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  firstname        String
  lastname         String
  username         String            @unique
  phone            String
  dob              DateTime          @db.Date
  gender           Gender
  role             Role
  department       Department?       @relation(fields: [departmentId], references: [id])
  departmentId     Int?
  studentBatch     StudentBatch?     @relation(fields: [studentBatchId], references: [id])
  studentBatchId   Int?
  courseSchedule   CourseSchedule[]  @relation("Instructor")
  groups           Group[]
  attendance       Attendance[]
  assignmentGrades AssignmentGrade[]
}

model StudentBatch {
  id        Int      @id @default(autoincrement())
  name      String
  startDate DateTime @db.Date
  endDate   DateTime @db.Date
  program   Program  @relation(fields: [programId], references: [id])
  programId Int
  students  User[]
}

model Course {
  id              Int              @id @default(autoincrement())
  name            String
  description     String
  programs        Program[]
  courseSchedules CourseSchedule[]
  assignments     Assignment[]
}

model Program {
  id           Int            @id @default(autoincrement())
  name         String
  description  String
  courses      Course[]
  studentBatch StudentBatch[]
}

model CourseSchedule {
  id           Int          @id @default(autoincrement())
  course       Course       @relation(fields: [courseId], references: [id])
  courseId     Int
  instructor   User         @relation("Instructor", fields: [instructorId], references: [id])
  instructorId Int
  day          Day
  group        Group        @relation(fields: [groupId], references: [id])
  groupId      Int
  attendance   Attendance[]
}

model Attendance {
  id               Int              @id @default(autoincrement())
  date             DateTime         @db.Date
  courseSchedule   CourseSchedule   @relation(fields: [courseScheduleId], references: [id])
  courseScheduleId Int
  student          User             @relation(fields: [studentId], references: [id])
  studentId        Int
  status           AttendanceStatus
}

model Group {
  id             Int              @id @default(autoincrement())
  name           String
  user           User             @relation(fields: [userId], references: [id])
  userId         Int
  courseSchedule CourseSchedule[]
  assignments    Assignment[]
}

model Department {
  id          Int    @id @default(autoincrement())
  name        String
  instructors User[]
}

model Assignment {
  id               Int               @id @default(autoincrement())
  name             String
  course           Course            @relation(fields: [courseId], references: [id])
  courseId         Int
  assignedToGroup  Group             @relation(fields: [groupId], references: [id])
  groupId          Int
  assignmentGrades AssignmentGrade[]
}

model AssignmentGrade {
  id           Int        @id @default(autoincrement())
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  assignmentId Int
  student      User       @relation(fields: [studentId], references: [id])
  studentId    Int
}

enum Role {
  SuperAdmin
  Admin
  Instructor
  Student
}

enum Gender {
  Male
  Female
}

enum Day {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

enum AttendanceStatus {
  Present
  Absent
  OnDuty
}
