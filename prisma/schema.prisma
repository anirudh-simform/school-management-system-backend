// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  output          = "../generated/prisma"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Authentication

model RefreshToken {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  token     String
  used      Boolean
  createdAt DateTime @default(now())
}

model School {
  id      Int    @id @default(autoincrement())
  name    String
  address String
  users   User[]

  Course Course[]

  Program Program[]

  CourseSchedule CourseSchedule[]

  Attendance Attendance[]

  Group StudentGroup[]

  Department Department[]

  Assignment Assignment[]

  AssignmentGrade AssignmentGrade[]

  StudentBatch StudentBatch[]

  AcademicYear AcademicYear[]

  AcademicTerm AcademicTerm[]

  GradeLevel GradeLevel[]

  Message Message[]

  Conversation Conversation[]

  ConversationParticipant ConversationParticipant[]

  MessageRead MessageRead[]
}

model SuperAdmin {
  id        String   @id @default(uuid())
  firstname String
  lastname  String
  email     String   @unique
  phone     String
  dob       DateTime @db.Date
  password  String
}

model User {
  id        String   @id @default(uuid())
  firstname String
  lastname  String
  email     String   @unique
  phone     String
  dob       DateTime @db.Date
  gender    Gender
  role      Role
  school    School   @relation(fields: [schoolId], references: [id])
  schoolId  Int
  password  String

  // for Students
  studentProfile StudentProfile?

  // for Instructors
  instructorProfile InstructorProfile?

  refreshTokens RefreshToken[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  conversationParticipant ConversationParticipant[]

  message Message[]

  messagesRead MessageRead[]
}

model StudentProfile {
  id               Int               @id @default(autoincrement())
  studentId        String            @unique
  student          User              @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentBatch     StudentBatch      @relation(fields: [studentBatchId], references: [id])
  studentBatchId   Int
  gradeLevel       GradeLevel        @relation(fields: [gradeLevelId], references: [id])
  gradeLevelId     Int
  attendance       Attendance[]
  assignmentGrades AssignmentGrade[]
  studentGroups    StudentGroup[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InstructorProfile {
  id             Int              @id @default(autoincrement())
  instructorId   String           @unique
  instructor     User             @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  department     Department       @relation(fields: [departmentId], references: [id])
  departmentId   Int
  courseSchedule CourseSchedule[] @relation("Instructor")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Department {
  id          Int                 @id @default(autoincrement())
  name        String
  school      School              @relation(fields: [schoolId], references: [id])
  schoolId    Int
  instructors InstructorProfile[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AcademicYear {
  id           Int            @id @default(autoincrement())
  name         String
  startDate    DateTime       @db.Date
  endDate      DateTime       @db.Date
  school       School         @relation(fields: [schoolId], references: [id])
  schoolId     Int
  AcademicTerm AcademicTerm[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AcademicTerm {
  id             Int          @id @default(autoincrement())
  name           String
  startDate      DateTime     @db.Date
  endDate        DateTime     @db.Date
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  academicYearId Int
  school         School       @relation(fields: [schoolId], references: [id])
  schoolId       Int

  CourseSchedule CourseSchedule[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GradeLevel {
  id         Int    @id @default(autoincrement())
  name       String
  levelOrder Int
  school     School @relation(fields: [schoolId], references: [id])
  schoolId   Int

  StudentBatch StudentBatch[]

  StudentProfile StudentProfile[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StudentBatch {
  id           Int              @id @default(autoincrement())
  name         String
  startDate    DateTime         @db.Date
  endDate      DateTime         @db.Date
  program      Program          @relation(fields: [programId], references: [id])
  programId    Int
  school       School           @relation(fields: [schoolId], references: [id])
  schoolId     Int
  students     StudentProfile[]
  gradeLevel   GradeLevel       @relation(fields: [gradeLevelId], references: [id])
  gradeLevelId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StudentGroup {
  id             Int              @id @default(autoincrement())
  name           String
  studentProfile StudentProfile[]
  school         School           @relation(fields: [schoolId], references: [id])
  schoolId       Int
  groupType      GroupType
  courseSchedule CourseSchedule[]
  assignments    Assignment[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model Course {
  id              Int              @id @default(autoincrement())
  name            String
  description     String
  school          School           @relation(fields: [schoolId], references: [id])
  schoolId        Int
  programs        Program[]
  courseSchedules CourseSchedule[]
  assignments     Assignment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Program {
  id           Int            @id @default(autoincrement())
  name         String
  description  String
  school       School         @relation(fields: [schoolId], references: [id])
  schoolId     Int
  courses      Course[]
  studentBatch StudentBatch[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CourseSchedule {
  id Int @id @default(autoincrement())

  course   Course @relation(fields: [courseId], references: [id])
  courseId Int

  instructorProfile   InstructorProfile @relation("Instructor", fields: [instructorProfileId], references: [id])
  instructorProfileId Int

  school   School @relation(fields: [schoolId], references: [id])
  schoolId Int

  day Day

  group   StudentGroup @relation(fields: [groupId], references: [id])
  groupId Int

  startTime DateTime
  endTime   DateTime

  academicTerm   AcademicTerm @relation(fields: [academicTermId], references: [id])
  academicTermId Int
  attendance     Attendance[]

  LectureInstance LectureInstance[]
}

model LectureInstance {
  id          Int      @id @default(autoincrement())
  date        DateTime @db.Date
  isCancelled Boolean

  schedule   CourseSchedule @relation(fields: [scheduleId], references: [id])
  scheduleId Int
}

model Attendance {
  id               Int              @id @default(autoincrement())
  date             DateTime         @db.Date
  courseSchedule   CourseSchedule   @relation(fields: [courseScheduleId], references: [id])
  courseScheduleId Int
  studentProfile   StudentProfile   @relation(fields: [studentProfileId], references: [id])
  studentProfileId Int
  school           School           @relation(fields: [schoolId], references: [id])
  schoolId         Int
  status           AttendanceStatus
}

model Assignment {
  id               Int               @id @default(autoincrement())
  name             String
  course           Course            @relation(fields: [courseId], references: [id])
  courseId         Int
  assignedToGroup  StudentGroup      @relation(fields: [groupId], references: [id])
  groupId          Int
  maxMarks         Int               @default(0)
  assignmentGrades AssignmentGrade[]
  school           School            @relation(fields: [schoolId], references: [id])
  schoolId         Int
}

model AssignmentGrade {
  id               Int            @id @default(autoincrement())
  assignment       Assignment     @relation(fields: [assignmentId], references: [id])
  assignmentId     Int
  studentProflie   StudentProfile @relation(fields: [studentProfileId], references: [id])
  studentProfileId Int
  school           School         @relation(fields: [schoolId], references: [id])
  schoolId         Int
  marksObtained    Int            @default(0)
}

// Chat Messaging

model Message {
  id      Int    @id @default(autoincrement())
  content String

  sender   User   @relation(fields: [senderId], references: [id])
  senderId String

  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int

  messageRead MessageRead[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  School    School?  @relation(fields: [schoolId], references: [id])
  schoolId  Int?
}

model Conversation {
  id            Int       @id @default(autoincrement())
  name          String?
  isGroup       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  lastMessageAt DateTime?

  messages Message[]

  participants ConversationParticipant[]

  school   School @relation(fields: [schoolId], references: [id])
  schoolId Int
}

model ConversationParticipant {
  id Int @id @default(autoincrement())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int

  joinedAt DateTime @default(now())
  isAdmin  Boolean  @default(false)
  School   School?  @relation(fields: [schoolId], references: [id])
  schoolId Int?

  @@unique([conversationId, userId])
}

model MessageRead {
  id        Int     @id @default(autoincrement())
  messageId Int
  message   Message @relation(fields: [messageId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  school   School @relation(fields: [schoolId], references: [id])
  schoolId Int

  @@unique([messageId, userId])
}

// Enums

enum GroupType {
  CLASS
  LAB
}

enum Role {
  SuperAdmin
  Admin
  SchoolSuperAdmin
  Instructor
  Student
}

enum Gender {
  Male
  Female
}

enum Day {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

enum AttendanceStatus {
  Present
  Absent
  OnDuty
}
